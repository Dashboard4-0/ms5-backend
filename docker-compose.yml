# MS5.0 Floor Dashboard - Backend Docker Compose

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ms5_postgres
    environment:
      POSTGRES_DB: factory_telemetry
      POSTGRES_USER: ms5_user
      POSTGRES_PASSWORD: ms5_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ms5_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ms5_user -d factory_telemetry"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB Extension
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: ms5_timescaledb
    environment:
      POSTGRES_DB: factory_telemetry
      POSTGRES_USER: ms5_user
      POSTGRES_PASSWORD: ms5_password
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - ms5_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ms5_user -d factory_telemetry"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ms5_redis
    command: redis-server --appendonly yes --requirepass ms5_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ms5_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MS5.0 Backend API
  backend:
    build: .
    container_name: ms5_backend
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://ms5_user:ms5_password@postgres:5432/factory_telemetry
      - REDIS_URL=redis://:ms5_redis_password@redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - LOG_LEVEL=INFO
      - DEBUG=true
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    ports:
      - "8000:8000"
    networks:
      - ms5_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ms5_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/var/www/static:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ms5_network
    depends_on:
      - backend
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ms5_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ms5_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ms5_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - ms5_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: ms5_minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=ms5_minio_user
      - MINIO_ROOT_PASSWORD=ms5_minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - ms5_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build: .
    container_name: ms5_celery_worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://ms5_user:ms5_password@postgres:5432/factory_telemetry
      - REDIS_URL=redis://:ms5_redis_password@redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    networks:
      - ms5_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Celery Beat Scheduler
  celery_beat:
    build: .
    container_name: ms5_celery_beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://ms5_user:ms5_password@postgres:5432/factory_telemetry
      - REDIS_URL=redis://:ms5_redis_password@redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./logs:/app/logs
    networks:
      - ms5_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Flower Monitoring (Celery)
  flower:
    build: .
    container_name: ms5_flower
    command: celery -A app.celery flower --port=5555
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://ms5_user:ms5_password@postgres:5432/factory_telemetry
      - REDIS_URL=redis://:ms5_redis_password@redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
    ports:
      - "5555:5555"
    networks:
      - ms5_network
    depends_on:
      - celery_worker
    restart: unless-stopped

volumes:
  postgres_data:
  timescaledb_data:
  redis_data:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  ms5_network:
    driver: bridge
